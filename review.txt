import numpy as np
import pandas as pd
from keras.datasets import imdb
from sklearn.model_selection import train_test_split
(x_train,y_train),(x_test,y_test)=imdb.load_data(num_words=10000)
data=np.concatenate((x_train,x_test),axis=0)
label=np.concatenate((y_train,y_test),axis=0)
y_train
def vectorize(sequences,dimension=10000):
  results=np.zeros((len(sequences),dimension),dtype='float32')
  for i, sequences in enumerate(sequences):
    results[i,sequences]=1
  return results
data=vectorize(data)
label=np.array(label).astype('float32')
x_train,x_test,y_train,y_test=train_test_split(data,label,test_size=0.20,random_state=1) 
import tensorflow as tf
from tensorflow import keras
model=keras.Sequential([
    keras.layers.Dense(16,activation='relu',input_shape=(10000,)),
    keras.layers.Dense(16,activation='relu'),
    keras.layers.Dense(1,activation='sigmoid'),
])
model.summary()
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
results=model.fit(x_train,y_train,epochs=2,batch_size=500,validation_data=(x_test,y_test))
score=model.evaluate(x_test,y_test,batch_size=500)
import matplotlib.pyplot as plt
plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()
