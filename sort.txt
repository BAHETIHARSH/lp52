#include <iostream>
#include <vector>
#include <omp.h>
#include <cstdlib>
 using namespace std;
 
 void parallel_bubble(int arr[], int n){
     #pragma omp parallel
     {
         int i,temp,flag=1;
         while(flag){
             flag=0;
             #pragma omp for
             for(int i=0;i<n-1;i++){
                 if(arr[i]>arr[i+1]){
                     temp=arr[i];
                     arr[i]=arr[i+1];
                     arr[i+1]=temp;
                     flag=1;
                 }
             }
         }
     }
 }
 
void merge(int arr[],int l,int m,int r ){
    int n1=m-l+1;
    int n2=r-m;
    int L[n1],R[n2];
    int i,j,k;
    for(int i=0;i<n1;i++){
        L[i]=arr[l+i];
    }
    for(j=0;j<n2;j++){
        R[j]=arr[m+1+j];
    }
    i=0;j=0;k=l;
    while(i<n1 && j<n2){
        if(L[i]<=R[j]){
            arr[k]=L[i];
            i++;
        }
        else{
            arr[k]=R[j];
            j++;
        }
        k++;
    }
    while(i<n1){
        arr[k]=L[i];
        i++;
        k++;
    }
    while(j<n2){
        arr[k]=R[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[],int l,int r){
    if(l<r){
        int m=l+(r-l)/2;
        #pragma omp paralle sections
        {
            #pragma omp section{
                {merge_sort(arr,l,m);}
            #pragma omp section
            {
                merge_sort(arr,m+1,r);
            }
              
            
            }
            merge(arr,l,m,r);
        }
            
        
}
 
 int main(){
     int arr[]={5,4,2,6,9,8,1};
     int n=sizeof(arr)/sizeof(arr[0]);
    
     parallel_bubble(arr,n);
     
     for(int i=0;i<n;i++){
         cout<<arr[i]<<" ";
         
     }
     cout<<endl;
    merge_sort(arr,0,n-1);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
     
     return 0;
     
 }